/**
 * Send daily spend rate notification via Telegram bot
 * 
 * @param {Object} options
 * @param {Object} options.spendRate - Spend rate calculation results
 * @param {string} options.botToken - Telegram bot token
 * @param {string} options.chatId - Telegram chat ID to send messages to
 * @returns {Promise<void>}
 */
export async function sendNotification({ spendRate, botToken, chatId }) {
  // Check if we have valid credentials
  if (!botToken || botToken === "your_telegram_bot_token") {
    console.warn("No valid Telegram bot token provided. Skipping notification.");
    console.log("To get started with Telegram notifications:");
    console.log("1. Create a bot with BotFather on Telegram");
    console.log("2. Add the bot token to your .dev.vars file");
    return false;
  }
  
  if (!chatId || chatId === "your_telegram_chat_id") {
    console.warn("No valid Telegram chat ID provided. Skipping notification.");
    console.log("First set up the bot token, then use /start command with your bot to get the chat ID");
    return false;
  }
  
  // Format currency for display
  const formatCurrency = (amount) => {
    try {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: spendRate.currency || 'AUD'
      }).format(amount);
    } catch (error) {
      console.error(`Error formatting currency: ${error.message}`);
      // Fallback formatting
      return `${spendRate.currency || 'AUD'} ${amount.toFixed(2)}`;
    }
  };
  
  // Format category names safely for HTML
  const formatCategories = () => {
    return spendRate.topCategories.map(cat => 
      `• <b>${cat.category}</b>: ${formatCurrency(cat.amount)} (${cat.percentage}%)`
    ).join('\n');
  };
  
  // Create message text with improved HTML formatting
  const messageText = `
<b>💰 DAILY SPEND RATE REPORT 💰</b>
━━━━━━━━━━━━━━━━━━━━━━

📊 <b>Period:</b> Last ${spendRate.periodDays} days
📈 <b>Daily Rate:</b> ${formatCurrency(spendRate.dailyRate)}
💵 <b>Total:</b> ${formatCurrency(spendRate.totalAmount)}

<b>📅 AVERAGES</b>
┌─ 7-Day: ${formatCurrency(spendRate.movingAverage7Day)}
└─ 30-Day: ${formatCurrency(spendRate.movingAverage30Day)}

<b>🎯 TARGET ($150/day)</b>
${spendRate.targetSpendAmount > 0 
  ? `You need to spend <b>${formatCurrency(spendRate.targetSpendAmount)}</b> today to reach a $150/day average`
  : `You've already exceeded the $150/day average target by <b>${formatCurrency(Math.abs(spendRate.targetSpendAmount))}</b>`}

<b>📋 TOP CATEGORIES</b>
${formatCategories()}

<i>Generated by Daily Spend Rate Tracker</i>
  `;
  
  try {
    console.log(`Sending Telegram message to chat ID: ${chatId}`);
    console.log(`Using bot token: ${botToken.substring(0, 6)}...`);
    
    // Validate the bot token format
    if (!botToken.match(/^\d+:[A-Za-z0-9_-]+$/)) {
      throw new Error("Invalid bot token format. Bot tokens should be in the format 'number:string'.");
    }
    
    // Send message using Telegram Bot API
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    console.log(`Making request to: ${url}`);
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: messageText,
        parse_mode: 'HTML'
      })
    });
    
    const responseData = await response.json();
    
    if (!response.ok) {
      console.error("Telegram API Error:", responseData);
      throw new Error(`Failed to send Telegram notification: ${JSON.stringify(responseData)}`);
    }
    
    console.log("Telegram notification sent successfully!");
    return true;
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
    throw error;
  }
}